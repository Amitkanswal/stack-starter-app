{"blt177a247959c3c6ff":{"tags":[],"ACL":[],"_version":1,"title":"Color Picker","config":{},"type":"field","data_type":"text","multiple":false,"srcdoc":"<html>\n<head>\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n   <link href=\"https://www.contentstack.com/sdks/contentstack-ui-extensions/dist/latest/ui-extension-sdk.css\" rel=\"stylesheet\" type=\"text/css\" media=\"all\">\n   <script src=\"https://www.contentstack.com/sdks/contentstack-ui-extensions/dist/latest/ui-extension-sdk.js\"></script>\n</head>\n<body>\n    <input type=\"color\" id=\"html5colorpicker\" onchange=\"colorChange()\" onclick=\"setFocus()\">\n    <script>\n        // initialise Field Extension\n        window.extensionField = {};\n        \n        // find color input element\n        var colorPickerElement = document.getElementById(\"html5colorpicker\");\n        \n        ContentstackUIExtension.init().then(function(extension) {\n            // make extension object globally available\n            extensionField = extension;\n            \n            // update the field height \n            extensionField.window.updateHeight();\n            \n            // Set default color in Contentstack\n            var defaultColor = \"#000000\";\n            if(!extensionField.field.getData().length){\n                extensionField.field.setData(defaultColor);\n            }\n            \n            // Get current color field value from Contentstack and update the color picker input element\n            colorPickerElement.value = extensionField.field.getData() || defaultColor;\n         \n        })\n        \n        // On color change event, pass new value to Contentstack\n        function colorChange(){\n            extensionField.field.setFocus();\n            extensionField.field.setData(colorPickerElement.value);\n        }\n        \n        function setFocus(){\n             extensionField.field.setFocus();\n        }\n    </script>\n</body>\n</html>"},"blt30fcb8538cca2689":{"tags":[],"ACL":[],"_version":1,"title":"JSON Editor","config":{},"type":"field","data_type":"json","multiple":false,"srcdoc":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\"/>\n    <title>Ace Editor Extension</title>\n    <style>\n      body { margin: 0; }\n    </style>\n    <!--\n    Load the Extensions API that is used to communicate with the containing app.\n    -->\n    <script src=\"https://www.contentstack.com/sdks/contentstack-ui-extensions/dist/latest/ui-extension-sdk.js\"></script>\n    <!--\n    We use lodash.throttle to avoid spamming the API with changes\n    -->\n    <script src=\"https://cdn.jsdelivr.net/npm/lodash@4.17.4/lodash.min.js\"></script>\n    \n    <!-- load a custom version of Ace editor -->\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.6/ace.js\"></script>\n   \n    <link href=\"https://assets.contentstack.io/v3/assets/blt30b41f7b9a5d7467/bltb6bb4f7db098181f/5b39e605fda2af4e7866b92c/jsoneditor.min.css\" rel=\"stylesheet\" type=\"text/css\">\n    <script src=\"https://assets.contentstack.io/v3/assets/blt30b41f7b9a5d7467/blte7fe106cc93cf2bf/5b33888fcfc846f95726af6f/jsoneditor.min.js\"></script>\n   \n  </head>\n  <body  onclick=\"setFocus()\">\n    <div id=\"jsoneditor\"></div>\n    \n    <script>\n        // initialise Field Extension\n        window.extensionField = {};\n        \n        // find jsoneditor element\n        var jsoneditorElement = document.getElementById(\"jsoneditor\");\n        \n        // initialise variable for json editor plugin\n        var jsonEditor = {};\n    \n        \n        ContentstackUIExtension.init().then(function(extension) {\n            \n            // make extension object globally available\n            extensionField = extension;\n            \n            \n            // update the field height \n            extensionField.window.updateHeight(220);\n            \n            // Get current Json editor field value from Contentstack and update the element\n            var value = extensionField.field.getData() || {};\n            \n            \n            // Configure Json editor\n            var options = {\n                modes: ['text', 'code', 'tree', 'form', 'view'],\n                mode: 'code',\n                ace: ace,\n                onChange : function(){\n                    updateFieldValue();\n                }\n            };\n            \n            jsonEditor = new JSONEditor(jsoneditorElement, options);\n            jsonEditor.set(value);\n            \n            \n            \n      \n            \n        })\n        \n        function setFocus(){\n            extensionField.field.setFocus();\n        }\n        \n        function updateFieldValue () {\n          var value = jsonEditor.get();\n          extensionField.field.setData(value).then(function(){\n            \t\tconsole.log('data set on child')\n            \t}).catch(function(error){\n            \t\tconsole.log('error in setting data',error)\n            \t})\n        }\n    </script>\n  </body>\n</html>"}}